{"version":3,"sources":["api/apiType.ts","serviceWorker.js","components/Navbar/Navigation/Navigation.jsx","components/Navbar/Friends/Person/Person.jsx","components/Navbar/Friends/Friends.jsx","components/Navbar/Friends/FriendsContainer.jsx","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","App.js","index.js","redux/auth-reducer.ts","components/Navbar/Friends/Friends.module.sass","components/Header/Header.module.sass","common/Preloader/Preloader.js","components/Navbar/Friends/Person/Person.module.sass","api/api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/users-reducer.ts","components/Navbar/Navigation/Navigation.module.sass","components/Navbar/Navbar.module.sass","assets/images/preloader.svg"],"names":["ResultCodeEnum","ResultCodeCaptcha","Boolean","window","location","hostname","match","Navigation","className","s","nav","item","to","activeClassName","active","Person","props","personItem","src","imgUrl","alt","name","Friends","personItems","state","friends","map","f","key","id","h3","persons","FriendsContainer","connect","sidebar","dispatch","Navbar","navBar","News","Music","Settings","Header","header","loginBlock","isAuth","loginName","login","onClick","logout","HeaderContainer","this","React","Component","auth","initialState","initializing","appReducer","action","type","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","messagesPage","dialogsReducer","usersPage","usersReducer","authReducer","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ProfileContainer","lazy","DialogsContainer","UsersContainer","LoginPage","App","initializeApp","fallback","Preloader","path","render","title","component","exact","from","AppContainer","withRouter","promise","getAuthUserData","Promise","all","then","SocialApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","userId","email","captchaUrl","setAuthUserData","payload","a","async","authAPI","me","data","resultCode","Success","password","rememberMe","CodeCaptcha","getCaptchaUrl","message","messages","length","stopSubmit","_error","securityAPI","response","url","module","exports","preloader","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","page","count","get","deleteFollowUsers","delete","postFollowUsers","post","getUserProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","filePhoto","formData","FormData","append","res","saveProfileData","profile","captcha","posts","likeCount","newPostText","addPost","setProfileData","setStatus","getProfile","file","photos","getState","reject","newPost","dialogs","addMessage","newMessageText","newMessage","users","pageSize","totalUsersCount","currentPage","isFetching","portionSize","followInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","booleanKey","toggleIsFollow","requestUsers","items","usersCount","totalCount","followUnfollowFlow","apiMethod","actionCreator","follow","bind","unfollow","u","followed","filter"],"mappings":"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","file":"static/js/main.9ea4fdac.chunk.js","sourcesContent":["import {PhotosType, UserType} from \"../types/types\";\r\n\r\n// Result code from responce\r\nexport enum ResultCodeEnum {Success = 0, Error = 1}\r\nexport enum ResultCodeCaptcha {CodeCaptcha = 10}\r\n// AuthAPI types\r\nexport type MeAuthAPI = { data: { id: number, email: string, login: string }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string> }\r\nexport type LoginAuthAPI = { resultCode: ResultCodeEnum | ResultCodeCaptcha\r\n    messages: Array<string>\r\n    data: { userId: number } }\r\nexport type LogoutAuthAPI = { resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    data: object }\r\n// UsersAPI types\r\nexport type GetUsersType = { items: Array<UserType>\r\n    totalCount: number\r\n    error: string }\r\nexport type DeleteFollowUsersType = {\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    data: object\r\n}\r\nexport type PostFollowUsersType = {\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    data: object\r\n}\r\n// ProfileAPI types\r\nexport type UpdateStatusType = {\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    data: object\r\n}\r\nexport type SavePhotoType = {\r\n    data: {\r\n        photos: PhotosType\r\n    }\r\n    messages: Array<string>\r\n    resultCode: ResultCodeEnum\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport s from './Navigation.module.sass';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <ul>\r\n                <li className={s.item}><NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink></li>\r\n                <li className={s.item}><NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink></li>\r\n                <li className={s.item}><NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink></li>\r\n                <li className={s.item}><NavLink to=\"/news\" activeClassName={s.active}>News</NavLink></li>\r\n                <li className={s.item}><NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink></li>\r\n                <li className={s.item}><NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport s from './Person.module.sass';\r\n\r\nconst Person = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.personItem}>\r\n                <img src={props.imgUrl} alt={\"img\"}/>\r\n                <p className={s.name}>{props.name}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\nimport s from './Friends.module.sass';\r\nimport Person from \"./Person/Person\";\r\n\r\nconst Friends = (props) => {\r\n\r\n    let personItems = props.state.friends\r\n        .map(f => <Person imgUrl={f.imgUrl} name={f.name} key={f.id}/>);\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.friends}>\r\n                <h3 className={s.h3}>Friends</h3>\r\n                <div className={s.persons}>\r\n                    { personItems }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Friends;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Friends from \"./Friends\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state.sidebar\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    }\r\n};\r\n\r\nconst FriendsContainer = connect(mapStateToProps, mapDispatchToProps)(Friends);\r\n\r\nexport default FriendsContainer;","import React from 'react';\r\nimport s from './Navbar.module.sass';\r\nimport Navigation from \"./Navigation/Navigation\";\r\nimport FriendsContainer from \"./Friends/FriendsContainer\";\r\n\r\nconst Navbar = () => {\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.navBar}>\r\n                <Navigation/>\r\n                <FriendsContainer/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './News.module.sass';\r\n\r\nconst News = (props) => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.sass';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.sass';\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport s from './Header.module.sass';\r\nimport {NavLink, Route} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://image.flaticon.com/icons/svg/145/145808.svg\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div><div className={s.loginName}>{props.login}</div>\r\n                        <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to='/login'>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    id: state.auth.id\r\n});\r\n\r\nexport default connect(mapStateToProps,{logout})(HeaderContainer);","import {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nexport type InitialStateType ={\r\n    initializing: boolean\r\n}\r\n\r\nlet initialState: InitialStateType  = {\r\n    initializing: false\r\n};\r\n\r\nlet appReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initializing: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = ():InitializedSuccessActionType => ({type: INITIALIZED_SUCCESS});\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n};\r\n\r\n\r\nexport default appReducer;","type FriendType = {\r\n    id: number\r\n    name: string\r\n    imgUrl: string\r\n}\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Pavel', imgUrl: 'https://avatarko.ru/img/kartinka/17/lisa_16103.jpg'},\r\n        {id: 2, name: 'Alesya', imgUrl: 'https://avatarko.ru/img/kartinka/17/lisa_16103.jpg'},\r\n        {id: 3, name: 'Natalia', imgUrl: 'https://avatarko.ru/img/kartinka/17/lisa_16103.jpg'},\r\n        {id: 4, name: 'Nikolay', imgUrl: 'https://avatarko.ru/img/kartinka/17/lisa_16103.jpg'},\r\n        {id: 5, name: 'Rocky', imgUrl: 'https://funpick.ru/wp-content/uploads/2017/10/Malenkie-8.jpg'}\r\n    ] as Array<FriendType>\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nlet sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default sidebarReducer;","import dialogsReducer from \"./dialogs-reducer\"\r\nimport profileReducer from \"./profile-reducer\"\r\nimport sidebarReducer from \"./sidebar-reducer\"\r\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\"\r\nimport usersReducer from \"./users-reducer\"\r\nimport authReducer from \"./auth-reducer\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\"\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store","import React, {Suspense, lazy} from 'react';\nimport './App.sass';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {Route, withRouter, Switch, Redirect, BrowserRouter} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {compose} from \"redux\";\nimport Preloader from \"./common/Preloader/Preloader\";\nimport store, {AppStateType} from \"./redux/redux-store\";\n\n\nconst ProfileContainer = lazy(() => import('./components/Profile/ProfileContainer'));\nconst DialogsContainer = lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst UsersContainer = lazy(() => import('./components/Users/UsersContainer'));\nconst LoginPage = lazy(() => import('./components/Login/Login'));\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initializing) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Suspense fallback={<Preloader/>}>\n                        <Switch>\n                            <Route\n                                path='/profile/:userId?'\n                                render={() => <ProfileContainer />}\n                            />\n                            <Route\n                                path='/dialogs'\n                                render={() => <DialogsContainer/>}\n                            />\n\n                            <Route\n                                path='/users'\n                                render={() => <UsersContainer title={\"Samuraj\"}/>}\n                            />\n                            <Route\n                                path='/login'\n                                render={() => <LoginPage/>}\n                            />\n                            <Route path='/news' component={News}/>\n                            <Route path='/music' component={Music}/>\n                            <Route path='/settings' component={Settings}/>\n                            <Redirect exact from=\"/\" to=\"/profile\" />\n                            <Route\n                                path='*'\n                                render={() => <div>404 NOT FOUND</div>}\n                            />\n                        </Switch>\n                    </Suspense>\n                </div>\n\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => ({\n    initializing: state.app.initializing\n});\n\nconst AppContainer = compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\nconst SocialApp = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n};\n\nexport default SocialApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport SocialApp from './App';\n\nReactDOM.render(<SocialApp />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ResultCodeCaptcha, ResultCodeEnum} from \"../api/apiType\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n};\r\n\r\nlet authReducer = (state= initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype setAuthUserDataPayloadType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\ntype setAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA,\r\n    payload: setAuthUserDataPayloadType\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null,\r\n                                email: string | null,\r\n                                login: string | null,\r\n                                isAuth: boolean): setAuthUserDataActionType => ({\r\n    type: SET_USER_DATA,\r\n    payload: {userId, email, login, isAuth}\r\n});\r\n\r\ntype GetCaptchaUrlSuccessPayloadType = {\r\n    captchaUrl: string\r\n}\r\ntype GetCaptchaUrlSuccessActionType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS\r\n    payload: GetCaptchaUrlSuccessPayloadType\r\n}\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessActionType => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}});\r\n\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n    let data = await authAPI.me();\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        let {id, email, login} = data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captchaUrl: string | null) => async (dispatch: any) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captchaUrl);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (data.resultCode === ResultCodeCaptcha.CodeCaptcha) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some Error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\nexport const logout = () => async (dispatch: any) => {\r\n    let data = await authAPI.logout();\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    dispatch(getCaptchaUrlSuccess(response.data.url))\r\n};\r\n\r\nexport default authReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"Friends_friends__blUdg\",\"h3\":\"Friends_h3__30okM\",\"persons\":\"Friends_persons__2BJ9M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2Qe-h\",\"loginBlock\":\"Header_loginBlock__2zKG1\",\"loginName\":\"Header_loginName__1oyWB\"};","import React from 'react';\r\nimport preloader from \"../../assets/images/preloader.svg\";\r\n\r\nlet Preloader = (props) => {\r\n    return <div>\r\n                <img src={preloader}/>\r\n            </div>\r\n};\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"personItem\":\"Person_personItem__2Y2Uy\",\"name\":\"Person_name__H-v8W\"};","import axios from \"axios\";\r\nimport {ProfileType} from \"../types/types\";\r\nimport {\r\n    LoginAuthAPI,\r\n    LogoutAuthAPI,\r\n    MeAuthAPI,\r\n    GetUsersType,\r\n    DeleteFollowUsersType,\r\n    PostFollowUsersType, UpdateStatusType, SavePhotoType\r\n} from \"./apiType\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'da5781ad-702b-4622-a264-735f8ee37ce3'\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(page = 1, count = 10) {\r\n        return instance.get<GetUsersType>(`users/?page=${page}&count=${count}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    deleteFollowUsers(userId: number) {\r\n        return instance.delete<DeleteFollowUsersType>(`follow/`+userId)\r\n            .then(response =>  response.data )\r\n    },\r\n    postFollowUsers(userId: number) {\r\n        return instance.post<PostFollowUsersType>(`follow/`+userId)\r\n            .then(response =>  response.data )\r\n    },\r\n    getUserProfile(userId: number) {\r\n        console.warn('Obsolete method. Please use profileAPI');\r\n        return profileAPI.getUserProfile(userId)\r\n    }\r\n};\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/`+userId)\r\n            .then( response => response.data )\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/`+userId)\r\n            .then( response => response.data )\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<UpdateStatusType>(`profile/status`, { status: status })\r\n            .then( response =>  response.data )\r\n    },\r\n    savePhoto(filePhoto: any) {\r\n        var formData = new FormData();\r\n        formData.append(\"image\", filePhoto);\r\n        return instance.post<SavePhotoType>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then( res => res.data);\r\n    },\r\n    saveProfileData(profile: ProfileType) {\r\n        return instance.put(`profile`, profile)\r\n            .then(res => res.data)\r\n    }\r\n\r\n};\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeAuthAPI>(`auth/me`)\r\n            .then( response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: string | null = null) {\r\n        return instance.post<LoginAuthAPI>(`/auth/login`, { email, password, rememberMe, captcha}).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<LogoutAuthAPI>(`/auth/login`).then(res => res.data)\r\n    }\r\n};\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n};","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {ResultCodeEnum} from \"../api/apiType\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_PROFILE_DATA = 'SET_PROFILE_DATA';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'It\\'s my first post', likeCount: 14},\r\n        {id: 2, message: 'Hi, how are you?', likeCount: 11},\r\n        {id: 3, message: 'How hey hi', likeCount: 12}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    newPostText: ''\r\n};\r\n\r\nlet profileReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: 4,\r\n                message: action.newPostText,\r\n                likeCount: 11\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case SET_PROFILE_DATA:\r\n            return {...state, profile: action.data};\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype AddPostActionType = {\r\n    type: typeof ADD_POST\r\n    newPostText: string\r\n}\r\nexport const addPost = (newPostText: string): AddPostActionType => ({type: ADD_POST, newPostText});\r\ntype SetProfileDataActionType = {\r\n    type: typeof SET_PROFILE_DATA\r\n    data: ProfileType\r\n}\r\nexport const setProfileData = (data: ProfileType): SetProfileDataActionType => ({type: SET_PROFILE_DATA, data});\r\ntype SetStatusActionType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nexport const setStatus = (status: string): SetStatusActionType => ({type: SET_STATUS, status});\r\ntype savePhotoSuccessActionType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photos: PhotosType\r\n}\r\nexport const savePhotoSuccess = (photos: PhotosType): savePhotoSuccessActionType => ({type: SAVE_PHOTO_SUCCESS, photos});\r\n\r\nexport const getProfile = (userId: number) => async (dispatch: any) => {\r\n    let data = await usersAPI.getUserProfile(userId);\r\n    dispatch(setProfileData(data));\r\n};\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (file: File) => async (dispatch: any) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfileData = (profile: ProfileType) => async (dispatch: any, getState: any) => {\r\n    const userId = getState.auth.userId;\r\n    const data = await profileAPI.saveProfileData(profile);\r\n    if (data.resultCode === 0) {\r\n        dispatch(getProfile(userId));\r\n    }\r\n    else {\r\n        debugger\r\n        dispatch(stopSubmit(\"profile-data\", {_error: data.messages[0]}));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;","import {DialogsType, MessagesType} from \"../types/types\";\r\n\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Pavel'},\r\n        {id: 2, name: 'Alesya'},\r\n        {id: 3, name: 'Guram'},\r\n        {id: 4, name: 'Roman'}\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: 'Hello!'},\r\n        {id: 2, message: 'Dratuti!'},\r\n        {id: 3, message: 'Poka'}\r\n    ] as Array<MessagesType>\r\n}\r\n\r\nlet dialogsReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let newMessage = {\r\n                id: 4,\r\n                message: action.newMessageText\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                messages: [...state.messages, newMessage]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessage = (newMessageText: string) => ({type: ADD_MESSAGE, newMessageText});\r\n\r\nexport default dialogsReducer;","import {usersAPI} from \"../api/api\";\r\nimport {UserType} from \"../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {ResultCodeEnum} from \"../api/apiType\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOW_IN_PROGRESS = 'TOGGLE_IS_FOLLOW_IN_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    portionSize: 20,\r\n    followInProgress: [] as Array<number>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            };\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.usersCount\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.booleanKey\r\n            };\r\n        case TOGGLE_IS_FOLLOW_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followInProgress: action.booleanKey\r\n                    ? [...state.followInProgress, action.userId]\r\n                    : state.followInProgress.filter(id => id != action.userId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype FollowSuccessActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({type: FOLLOW, userId: userId});\r\ntype UnfollowSuccessActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({type: UNFOLLOW, userId: userId});\r\ntype setUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>): setUsersActionType => ({type: SET_USERS, users: users});\r\ntype setCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): setCurrentPageActionType => ({type: SET_CURRENT_PAGE, currentPage});\r\ntype setTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    usersCount: number\r\n}\r\nexport const setTotalUsersCount = (usersCount: number): setTotalUsersCountActionType => ({type: SET_TOTAL_USERS_COUNT, usersCount});\r\ntype toggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    booleanKey: boolean\r\n}\r\nexport const toggleIsFetching = (booleanKey: boolean): toggleIsFetchingActionType => ({type: TOGGLE_IS_FETCHING, booleanKey});\r\ntype toggleIsFollowActionType = {\r\n    type: typeof TOGGLE_IS_FOLLOW_IN_PROGRESS\r\n    booleanKey: boolean\r\n    userId: number\r\n}\r\nexport const toggleIsFollow = (booleanKey: boolean, userId: number): toggleIsFollowActionType => ({type: TOGGLE_IS_FOLLOW_IN_PROGRESS, booleanKey, userId});\r\n\r\ntype ActionsType = FollowSuccessActionType | UnfollowSuccessActionType |\r\n    setUsersActionType | setCurrentPageActionType | setTotalUsersCountActionType |\r\n    toggleIsFetchingActionType | toggleIsFollowActionType\r\n\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch, getState) => {\r\n    dispatch(toggleIsFetching(true));\r\n    dispatch(setCurrentPage(currentPage));\r\n\r\n    let data = await usersAPI.getUsers(currentPage, pageSize);\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n    dispatch(toggleIsFetching(false))\r\n};\r\n\r\nconst followUnfollowFlow = async (dispatch: DispatchType,userId: number,\r\n                                  apiMethod: any, actionCreator: (userId: number) => FollowSuccessActionType | UnfollowSuccessActionType ) => {\r\n    dispatch(toggleIsFollow(true, userId));\r\n\r\n    let data = await apiMethod(userId);\r\n    if (data.resultCode == ResultCodeEnum.Success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollow(false, userId));\r\n};\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    await followUnfollowFlow(dispatch, userId, usersAPI.postFollowUsers.bind(usersAPI), followSuccess);\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    await followUnfollowFlow(dispatch, userId, usersAPI.deleteFollowUsers.bind(usersAPI), unfollowSuccess);\r\n};\r\n\r\nexport default usersReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__1QyU7\",\"active\":\"Navigation_active__3kEM0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"Navbar_navBar__lPWyD\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.b303b419.svg\";"],"sourceRoot":""}