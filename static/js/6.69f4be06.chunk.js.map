{"version":3,"sources":["common/FormControls/FormControls.tsx","common/FormControls/FormControls.module.sass","Controls/Validators/Validators.tsx","components/Dialogs/Dialogs.module.sass","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.tsx"],"names":["Element","input","meta","touched","error","props","hasError","className","styles","formControl","Textarea","Input","createField","placeholder","type","name","component","validator","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","DialogItem","path","id","s","dialog","to","Message","message","maxLength30","reduxForm","form","onSubmit","handleSubmit","Field","Dialogs","dialogs","messages","addMessage","dialogElements","map","d","messageElements","m","dialogsItems","AddMessageForm","values","newMessageText","mapStateToProps","state","isAuth","auth","compose","Component","RedirectComponent","this","React","connect","messagesPage"],"mappings":"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","file":"static/js/6.69f4be06.chunk.js","sourcesContent":["import React, {ComponentElement, ComponentType, ReactNode} from \"react\";\r\nimport styles from \"./FormControls.module.sass\";\r\nimport {BaseFieldProps, Field, WrappedFieldProps} from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../Controls/Validators/Validators\";\r\nimport {CommonFieldProps} from \"redux-form/lib/Field\";\r\n\r\nconst Element =\r\n    (Element: string) =>\r\n            ({input,\r\n                 meta: {touched, error},\r\n                 ...props}: WrappedFieldProps) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <Element {...error} {...props} />\r\n            {hasError && <span> {error} </span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = Element(\"textarea\");\r\nexport const Input: React.FC<WrappedFieldProps> = Element(\"input\");\r\n\r\n\r\nexport function createField<FormKeyType extends string> (placeholder: string | undefined,\r\n                            type: string,\r\n                            name: FormKeyType,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            validator: Array<FieldValidatorType>,\r\n                            props = {},\r\n                            text = '') {\r\n   return <div>\r\n        <label>\r\n            <Field placeholder={placeholder} type={type} name={name} component={component}\r\n                   validate={validator}\r\n                {...props}/>\r\n        </label>{text}\r\n    </div>\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2GFZb\",\"error\":\"FormControls_error__2yEwC\"};","import React from 'react'\r\nimport { Validator } from 'redux-form'\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: Validator = (value) => {\r\n    if (value) return undefined\r\n\r\n    return <span>{\"Required!\"}</span>\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): Validator => (value) => {\r\n    if (value.length > maxLength) return <span>{`Max length is ${maxLength} symbols`}</span>\r\n\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__UrR_X\",\"dialogsItems\":\"Dialogs_dialogsItems__2GSit\",\"dialog\":\"Dialogs_dialog__QT_GS\",\"messages\":\"Dialogs_messages__2yisJ\",\"message\":\"Dialogs_message__f1z3W\",\"form\":\"Dialogs_form__UhE31\"};","import React from 'react';\r\nimport s from './../Dialogs.module.sass';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = `/dialogs/${props.id}`\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.sass';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.sass';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../Controls/Validators/Validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nexport default reduxForm<InjectedFormProps>({form: 'dialogAddMessageForm'})(props => {\r\n    return (\r\n        <form className={s.form} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <label>\r\n                    <Field component={Textarea} name={\"newMessageText\"} placeholder={\"Type message...\"}\r\n                           validate={[required, maxLength30]}/>\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n});","import React from 'react';\r\nimport s from './Dialogs.module.sass';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm\";\r\nimport {DialogsType, MessagesType} from \"../../types/types\";\r\nimport {InjectedFormProps} from \"redux-form\";\r\n\r\n\r\ntype PropsType = {\r\n    dialogs: DialogsType\r\n    messages: MessagesType\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType & InjectedFormProps<{}, PropsType>> = ({dialogs, messages, addMessage}) => {\r\n    let dialogElements = dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r\n\r\n    let messageElements = messages\r\n        // @ts-ignore\r\n        .map(m => <Message message={m.message} id={m.id}/>);\r\n\r\n    const addNewMessage = (values: { newMessageText: string }) => {\r\n        addMessage(values.newMessageText)\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                // @ts-ignore\r\n                <AddMessageForm onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return (<Redirect to='/login'/>)\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","import React from 'react';\r\nimport {addMessage} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {DialogsType, MessagesType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: DialogsType\r\n    messages: MessagesType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\nconst DialogsContainer: React.FC<PropsType> = ({dialogs, messages, addMessage}) => {\r\n    return (\r\n        // @ts-ignore\r\n        <Dialogs dialogs={dialogs}\r\n                 messages={messages}\r\n                 addMessage={addMessage}\r\n        />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.messagesPage.dialogs,\r\n        messages: state.messagesPage.messages\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {addMessage})\r\n)(DialogsContainer);"],"sourceRoot":""}