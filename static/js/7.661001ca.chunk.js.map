{"version":3,"sources":["common/FormControls/FormControls.tsx","common/FormControls/FormControls.module.sass","Controls/Validators/Validators.tsx","components/Login/Login.module.sass","components/Login/LoginReduxForm/LoginReduxForm.tsx","components/Login/Login.tsx"],"names":["Element","input","meta","touched","error","props","hasError","className","styles","formControl","Textarea","Input","createField","placeholder","type","name","component","validator","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","reduxForm","form","handleSubmit","captchaUrl","loginForm","onSubmit","undefined","captcha","src","alt","loginError","connect","state","isAuth","auth","login","to","loginPage","formData","email","password","rememberMe"],"mappings":"gQAMMA,EACF,SAACA,GAAD,OACQ,YAEsC,EAFpCC,MAEqC,IAAD,IADjCC,KAAOC,EAC0B,EAD1BA,QAASC,EACiB,EADjBA,MACbC,EAA8B,gCACxCC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KAClE,kBAAC,EAAD,iBAAaA,EAAWC,IACvBC,GAAY,kCAAQF,EAAR,QAKZM,EAAwCV,EAAQ,YAChDW,EAAqCX,EAAQ,SAGnD,SAASY,EAAyCC,EAC7BC,EACAC,EACAC,EACAC,GAEY,IADZZ,EACW,uDADH,GACRa,EAAW,uDAAJ,GAChC,OAAO,6BACF,+BACI,kBAAC,IAAD,eAAOL,YAAaA,EAAaC,KAAMA,EAAMC,KAAMA,EAAMC,UAAWA,EAC7DG,SAAUF,GACTZ,KACHa,K,oBCnCjBE,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,8B,iCCD1E,wFAKaC,EAAsB,SAACC,GAChC,IAAIA,EAEJ,OAAO,8BAAO,cAGLC,EAAmB,SAACC,GAAD,OAAkC,SAACF,GAC/D,GAAIA,EAAMG,OAASD,EAAW,OAAO,sDAAwBA,EAAxB,gB,oBCXzCL,EAAOC,QAAU,CAAC,UAAY,yBAAyB,WAAa,0BAA0B,QAAU,yB,yGCgCzFM,cAAkD,CAACC,KAAM,SAAzDD,EArBX,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAczB,EAAuB,EAAvBA,MAAO0B,EAAgB,EAAhBA,WACvB,OACI,0BAAMvB,UAAWC,IAAOuB,UAAWC,SAAUH,GACxCjB,YAA0B,WAAY,QAAS,QAASD,IAAO,CAACW,MAChEV,YAA0B,cAAe,WAAY,WAAYD,IAAO,CAACW,MACzEV,iBAA0BqB,EAAW,WAAY,aAActB,IAAO,GAAI,GAAI,aAC9EmB,GAAc,yBAAKvB,UAAWC,IAAO0B,SAClC,yBAAKC,IAAKL,EAAYM,IAAI,aAE7BN,GAAclB,YAA0B,eAAgB,UAAW,UAAWD,IAAO,CAACW,MACtFlB,GAAS,yBAAKG,UAAWC,IAAO6B,YAC5BjC,GAGL,6BACI,8C,wBCoBDkC,uBALS,SAACC,GAAD,MAA+C,CACnEC,OAAQD,EAAME,KAAKD,OACnBV,WAAYS,EAAME,KAAKX,cAQJ,CAACY,WALTJ,EArBuD,SAACjC,GAMnE,OAAIA,EAAMmC,OACC,kBAAC,IAAD,CAAUG,GAAI,aAGlB,6BACH,yBAAKpC,UAAWC,IAAOoC,WAAvB,SACA,kBAAC,EAAD,CAAgBZ,SAVH,SAACa,GACdxC,EAAMqC,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASX,UASzCJ,WAAYzB,EAAMyB","file":"static/js/7.661001ca.chunk.js","sourcesContent":["import React, {ComponentElement, ComponentType, ReactNode} from \"react\";\r\nimport styles from \"./FormControls.module.sass\";\r\nimport {BaseFieldProps, Field, WrappedFieldProps} from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../Controls/Validators/Validators\";\r\nimport {CommonFieldProps} from \"redux-form/lib/Field\";\r\n\r\nconst Element =\r\n    (Element: string) =>\r\n            ({input,\r\n                 meta: {touched, error},\r\n                 ...props}: WrappedFieldProps) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <Element {...error} {...props} />\r\n            {hasError && <span> {error} </span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = Element(\"textarea\");\r\nexport const Input: React.FC<WrappedFieldProps> = Element(\"input\");\r\n\r\n\r\nexport function createField<FormKeyType extends string> (placeholder: string | undefined,\r\n                            type: string,\r\n                            name: FormKeyType,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            validator: Array<FieldValidatorType>,\r\n                            props = {},\r\n                            text = '') {\r\n   return <div>\r\n        <label>\r\n            <Field placeholder={placeholder} type={type} name={name} component={component}\r\n                   validate={validator}\r\n                {...props}/>\r\n        </label>{text}\r\n    </div>\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2GFZb\",\"error\":\"FormControls_error__2yEwC\"};","import React from 'react'\r\nimport { Validator } from 'redux-form'\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: Validator = (value) => {\r\n    if (value) return undefined\r\n\r\n    return <span>{\"Required!\"}</span>\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): Validator => (value) => {\r\n    if (value.length > maxLength) return <span>{`Max length is ${maxLength} symbols`}</span>\r\n\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__1jOy1\",\"loginError\":\"Login_loginError__3oNvV\",\"captcha\":\"Login_captcha__3rx76\"};","import React from 'react';\r\nimport styles from './../Login.module.sass';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../../../common/FormControls/FormControls\";\r\nimport {required} from \"../../../Controls/Validators/Validators\";\r\nimport {LoginFormKey, LoginFormValuesType} from \"../Login\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginReduxForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form className={styles.loginForm} onSubmit={handleSubmit}>\r\n            {createField<LoginFormKey>(\"Email...\", \"email\", \"email\", Input, [required])}\r\n            {createField<LoginFormKey>(\"Password...\", \"password\", \"password\", Input, [required])}\r\n            {createField<LoginFormKey>(undefined, \"checkbox\", \"rememberMe\", Input, [], {}, \"rember me\")}\r\n            {captchaUrl && <div className={styles.captcha}>\r\n                <img src={captchaUrl} alt=\"captcha\"/>\r\n            </div>}\r\n            {captchaUrl && createField<LoginFormKey>(\"Type symbols\", \"captcha\", \"captcha\", Input, [required])}\r\n            {error && <div className={styles.loginError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginReduxForm)","import React from 'react';\r\nimport styles from './Login.module.sass';\r\nimport LoginReduxForm from \"./LoginReduxForm/LoginReduxForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean,\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captchaUrl: string | null) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\nexport type LoginFormKey = Extract<keyof LoginFormValuesType, string>\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    };\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return <div>\r\n        <div className={styles.loginPage}>Login</div>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n});\r\n\r\nexport default connect<\r\n    MapStateToPropsType,\r\n    MapDispatchToPropsType,\r\n    LoginFormValuesType,\r\n    AppStateType\r\n    >(mapStateToProps, {login})(Login);"],"sourceRoot":""}